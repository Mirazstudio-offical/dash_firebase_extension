class UltimateFirebaseExtension {
    constructor(runtime) {
        this.runtime = runtime;
        this.firebase = null;
        this.auth = null;
        this.db = null;
        this.firestore = null;
        this.storage = null;
        this.functions = null;
        this.currentUser = null;
        this.phoneConfirmationResult = null;
        this.mfaResolver = null;
        this.persistenceType = 'local';
        this.lastErrorMessage = '';
        this.lastReceivedData = '';
        this.lastFirestoreQueryResult = '';
        this.lastFunctionResult = '';

        this.dbListeners = new Map();
        this.runtime.on('PROJECT_STOP_ALL', () => {
            if (this.db) { this.dbListeners.forEach((listener, path) => this.db.ref(path).off('value', listener)); }
            this.dbListeners.clear();
            this.mfaResolver = null;
            this.phoneConfirmationResult = null;
        });
    }

    _setupRecaptchaContainer() { if (document.getElementById('recaptcha-container')) return; const c = document.createElement('div'); c.id = 'recaptcha-container'; document.body.appendChild(c);
    }

    getInfo() {
        return {
            id: 'firebaseapi',
            name: 'FirebaseAPI',
            color1: '#C0C0C0',
            blockIconURI: 'https://www.gstatic.com/mobilesdk/240501_mobilesdk/firebase_64dp.png', 
            blocks: [
                { opcode: 'loadAndConfigure', blockType: Scratch.BlockType.COMMAND, text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Firebase: URL [DB_URL] API –∫–ª—é—á [API_KEY] ID –ø—Ä–æ–µ–∫—Ç–∞ [PROJECT_ID]', arguments: { DB_URL: { type: Scratch.ArgumentType.STRING, defaultValue: 'https://project-id.firebaseio.com' }, API_KEY: { type: Scratch.ArgumentType.STRING, defaultValue: 'AIzaSy...' }, PROJECT_ID: { type: Scratch.ArgumentType.STRING, defaultValue: 'your-project-id' }}},
                '---',
                { blockType: Scratch.BlockType.LABEL, text: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ü—Ä–æ—Ñ–∏–ª—å' },
                { opcode: 'setAuthPersistence', blockType: Scratch.BlockType.COMMAND, text: '–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ö–æ–¥ [PERSISTENCE_TYPE]', arguments: { PERSISTENCE_TYPE: { type: Scratch.ArgumentType.STRING, menu: 'persistenceOptions' }}},
                { opcode: 'signUp', blockType: Scratch.BlockType.COMMAND, text: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å email [EMAIL] –ø–∞—Ä–æ–ª—å [PASSWORD]', arguments: { EMAIL: { type: Scratch.ArgumentType.STRING }, PASSWORD: { type: Scratch.ArgumentType.STRING, inputType: Scratch.ArgumentType.PASSWORD }}},
                { opcode: 'signIn', blockType: Scratch.BlockType.COMMAND, text: '–í–æ–π—Ç–∏ –∫–∞–∫ email [EMAIL] –ø–∞—Ä–æ–ª—å [PASSWORD]', arguments: { EMAIL: { type: Scratch.ArgumentType.STRING }, PASSWORD: { type: Scratch.ArgumentType.STRING, inputType: Scratch.ArgumentType.PASSWORD }}},
                { opcode: 'signInWithProvider', blockType: Scratch.BlockType.COMMAND, text: '–í–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é [PROVIDER]', arguments: { PROVIDER: { type: Scratch.ArgumentType.STRING, menu: 'providers' }}},
                { opcode: 'signInWithToken', blockType: Scratch.BlockType.COMMAND, text: '–í–æ–π—Ç–∏ –ø–æ —Ç–æ–∫–µ–Ω—É [TOKEN]', arguments: { TOKEN: { type: Scratch.ArgumentType.STRING, defaultValue: 'eyJhbGciOi...' }}},
                { opcode: 'signOut', blockType: Scratch.BlockType.COMMAND, text: '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'},
                { opcode: 'getCurrentUser', blockType: Scratch.BlockType.REPORTER, text: '–î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [FIELD]', arguments: { FIELD: { type: Scratch.ArgumentType.STRING, menu: 'userFields' } } },
                // [–ù–û–í–´–ô –ë–õ–û–ö] –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–æ–∫–µ–Ω–∞
                { opcode: 'getCurrentUserIDToken', blockType: Scratch.BlockType.REPORTER, text: 'ID —Ç–æ–∫–µ–Ω —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'},
                { opcode: 'isUserLoggedIn', blockType: Scratch.BlockType.BOOLEAN, text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É?' },
                { opcode: 'updateUserProfile', blockType: Scratch.BlockType.COMMAND, text: '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: –∏–º—è [NAME] URL —Ñ–æ—Ç–æ [PHOTO_URL]', arguments: { NAME: { type: Scratch.ArgumentType.STRING }, PHOTO_URL: { type: Scratch.ArgumentType.STRING }}},
                { opcode: 'updateUserPassword', blockType: Scratch.BlockType.COMMAND, text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ [NEW_PASSWORD]', arguments: { NEW_PASSWORD: { type: Scratch.ArgumentType.STRING, inputType: Scratch.ArgumentType.PASSWORD }}},
                '---',
                { blockType: Scratch.BlockType.LABEL, text: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Email –∏ –¢–µ–ª–µ—Ñ–æ–Ω–æ–º' },
                { opcode: 'sendVerificationEmail', blockType: Scratch.BlockType.COMMAND, text: '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—á—Ç—ã' },
                { opcode: 'sendPasswordReset', blockType: Scratch.BlockType.COMMAND, text: '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ email [EMAIL]', arguments: { EMAIL: { type: Scratch.ArgumentType.STRING }}},
                { opcode: 'updateUserEmail', blockType: Scratch.BlockType.COMMAND, text: '–∏–∑–º–µ–Ω–∏—Ç—å email —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ [NEW_EMAIL]', arguments: { NEW_EMAIL: { type: Scratch.ArgumentType.STRING }}},
                { opcode: 'sendVerificationCode', blockType: Scratch.BlockType.COMMAND, text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω [PHONE_NUMBER]', arguments: { PHONE_NUMBER: { type: Scratch.ArgumentType.STRING, defaultValue: '+12345678900' }}},
                { opcode: 'signInWithPhoneCode', blockType: Scratch.BlockType.COMMAND, text: '–í–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞ [CODE]', arguments: { CODE: { type: Scratch.ArgumentType.STRING }}},
                '---',
                { blockType: Scratch.BlockType.LABEL, text: '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (MFA)' },
                { opcode: 'enrollMfa', blockType: Scratch.BlockType.COMMAND, text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å 2FA –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ [PHONE_NUMBER]', arguments: { PHONE_NUMBER: { type: Scratch.ArgumentType.STRING, defaultValue: '+12345678900' }}},
                { opcode: 'whenMfaRequired', blockType: Scratch.BlockType.HAT, text: '–ö–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π —Ñ–∞–∫—Ç–æ—Ä (2FA)', isEdgeActivated: false },
                { opcode: 'getMfaHint', blockType: Scratch.BlockType.REPORTER, text: '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞' },
                { opcode: 'completeSignInWithMfaCode', blockType: Scratch.BlockType.COMMAND, text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Ö–æ–¥ —Å 2FA –∫–æ–¥–æ–º [CODE]', arguments: { CODE: { type: Scratch.ArgumentType.STRING }}},
                '---',
                { blockType: Scratch.BlockType.LABEL, text: 'üóÇÔ∏è Cloud Firestore' },
                { opcode: 'firestoreAddDoc', blockType: Scratch.BlockType.REPORTER, text: '–¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç [DATA] –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é [PATH]', arguments: { DATA: { type: Scratch.ArgumentType.STRING, defaultValue: '{"name":"Alex", "score":100}' }, PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'players' }}},
                { opcode: 'firestoreSetDoc', blockType: Scratch.BlockType.COMMAND, text: '–∑–∞–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç [DATA] –ø–æ –ø—É—Ç–∏ [PATH]', arguments: { DATA: { type: Scratch.ArgumentType.STRING, defaultValue: '{"level":5}' }, PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'players/some-id' }}},
                { opcode: 'firestoreGetDoc', blockType: Scratch.BlockType.REPORTER, text: '–ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –ø—É—Ç–∏ [PATH]', arguments: { PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'players/some-id' }}},
                { opcode: 'firestoreDeleteDoc', blockType: Scratch.BlockType.COMMAND, text: '—É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –ø—É—Ç–∏ [PATH]', arguments: { PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'players/some-id' }}},
                '---',
                { blockType: Scratch.BlockType.LABEL, text: '‚òÅÔ∏è Cloud Storage' },
                { opcode: 'storageUploadText', blockType: Scratch.BlockType.COMMAND, text: '–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç [TEXT_DATA] –≤ —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ [PATH]', arguments: { TEXT_DATA: { type: Scratch.ArgumentType.STRING, defaultValue: 'Hello World!' }, PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'saves/save1.txt' }}},
                { opcode: 'storageGetURL', blockType: Scratch.BlockType.REPORTER, text: '–ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ [PATH]', arguments: { PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'images/logo.png' }}},
                { opcode: 'storageDeleteFile', blockType: Scratch.BlockType.COMMAND, text: '—É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ [PATH]', arguments: { PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'saves/old_save.txt' }}},
                '---',
                { blockType: Scratch.BlockType.LABEL, text: 'üöÄ Cloud Functions (Callable)' },
                { opcode: 'functionsCall', blockType: Scratch.BlockType.COMMAND, text: '–≤—ã–∑–≤–∞—Ç—å –æ–±–ª–∞—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é [NAME] —Å –¥–∞–Ω–Ω—ã–º–∏ [DATA]', arguments: { NAME: { type: Scratch.ArgumentType.STRING, defaultValue: 'processPayment' }, DATA: { type: Scratch.ArgumentType.STRING, defaultValue: '{"amount":100, "currency":"USD"}' }}},
                { opcode: 'onFunctionResult', blockType: Scratch.BlockType.HAT, text: '–∫–æ–≥–¥–∞ –æ–±–ª–∞—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç'},
                { opcode: 'getFunctionResult', blockType: Scratch.BlockType.REPORTER, text: '–ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏' },
                '---',
                { blockType: Scratch.BlockType.LABEL, text: 'üåê HTTPS –§—É–Ω–∫—Ü–∏–∏' },
                { opcode: 'httpsCallGet', blockType: Scratch.BlockType.COMMAND, text: 'HTTPS GET –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç [ENDPOINT]', arguments: { ENDPOINT: { type: Scratch.ArgumentType.STRING, defaultValue: 'helloWorld' } } },
                { opcode: 'httpsCallPost', blockType: Scratch.BlockType.COMMAND, text: 'HTTPS POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç [ENDPOINT] —Å –¥–∞–Ω–Ω—ã–º–∏ [DATA]', arguments: { ENDPOINT: { type: Scratch.ArgumentType.STRING, defaultValue: 'processData' }, DATA: { type: Scratch.ArgumentType.STRING, defaultValue: '{"key":"value"}' } } },
                '---',
                { blockType: Scratch.BlockType.LABEL, text: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä–∞—è)' },
                { opcode: 'writeData', blockType: Scratch.BlockType.COMMAND, text: '–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ –ø—É—Ç–∏ [PATH] –∑–Ω–∞—á–µ–Ω–∏–µ [VALUE]', arguments: { PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'users/player1' }, VALUE: { type: Scratch.ArgumentType.STRING, defaultValue: '{"score": 100}' }}},
                { opcode: 'readData', blockType: Scratch.BlockType.REPORTER, text: '–ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—É—Ç–∏ [PATH]', arguments: { PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'users/player1/score' }}},
                { opcode: 'listenForData', blockType: Scratch.BlockType.HAT, text: '–ö–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—É—Ç–∏ [PATH] –∏–∑–º–µ–Ω—è—é—Ç—Å—è', isEdgeActivated: false, arguments: { PATH: { type: Scratch.ArgumentType.STRING, defaultValue: 'chats/main' }}},
                { opcode: 'getLastReceivedData', blockType: Scratch.BlockType.REPORTER, text: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'},
                '---',
                { blockType: Scratch.BlockType.LABEL, text: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –û—à–∏–±–æ–∫' },
                { opcode: 'onAuthError', blockType: Scratch.BlockType.HAT, text: '–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'},
                { opcode: 'onDbError', blockType: Scratch.BlockType.HAT, text: '–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'},
                { opcode: 'getLastError', blockType: Scratch.BlockType.REPORTER, text: '–ø–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞' },
                { opcode: 'clearLastError', blockType: Scratch.BlockType.COMMAND, text: '–æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É'},
            ],
            menus: {
                persistenceOptions: { acceptReporters: true, items: ['–ù–∞–≤—Å–µ–≥–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)', '–ù–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é'] },
                providers: { acceptReporters: true, items: ['Google', 'Microsoft', 'GitHub', 'Apple', 'Anonymous'] },
                userFields: { acceptReporters: true, items: ['Email', 'UID', 'Display Name', 'Phone Number', 'Photo URL', '–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞?'] }
            }
        };
    }
    
    _handleError(error, type) { console.error(`Firebase Error (${type}):`, error); this.lastErrorMessage = error.message; switch(type) { case 'auth': this.runtime.startHats('ultimateFirebase_onAuthError'); break; case 'db': this.runtime.startHats('ultimateFirebase_onDbError'); break; case 'mfa': this.runtime.startHats('ultimateFirebase_onMfaError'); break; case 'firestore': case 'storage': case 'functions': this.runtime.startHats('ultimateFirebase_onDbError'); break; } }
    _isReady(service) { if (!this.firebase) { this._handleError({ message: 'Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!' }, 'auth'); return false; } if (service && !this[service]) { this._handleError({ message: `–°–µ—Ä–≤–∏—Å ${service} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.` }, 'auth'); return false; } return true; }
    _parseValue(value) { try { return JSON.parse(value); } catch (e) { return value; } }
    
    loadAndConfigure(args) { this._setupRecaptchaContainer(); const firebaseConfig = { apiKey: args.API_KEY, authDomain: `${args.PROJECT_ID}.firebaseapp.com`, projectId: args.PROJECT_ID, databaseURL: args.DB_URL, storageBucket: `${args.PROJECT_ID}.appspot.com`}; const loadScript = src => new Promise((resolve, reject) => { if (document.querySelector(`script[src="${src}"]`)) return resolve(); const s = document.createElement('script'); s.src = src; s.onload = resolve; s.onerror = () => reject(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞: ${src}`); document.head.appendChild(s); }); return Promise.all([ loadScript("https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"), loadScript("https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"), loadScript("https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"), loadScript("https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"), loadScript("https://www.gstatic.com/firebasejs/8.10.1/firebase-storage.js"), loadScript("https://www.gstatic.com/firebasejs/8.10.1/firebase-functions.js") ]).then(() => { if (!window.firebase.apps.length) { this.firebase = window.firebase.initializeApp(firebaseConfig); } else { this.firebase = window.firebase.app(); } this.auth = firebase.auth(); this.db = firebase.database(); this.firestore = firebase.firestore(); this.storage = firebase.storage(); this.functions = firebase.functions(); this.auth.onAuthStateChanged(user => { this.currentUser = user; }); console.log("Firebase Full Suite SDK –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."); try { window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', { 'size': 'invisible' }); } catch (e) { console.warn("Recaptcha Verifier –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –í—Ö–æ–¥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å."); } }).catch(error => { this._handleError(error, 'auth'); }); }
    
    onAuthError() { return false; }
    onDbError() { return false; }
    onMfaError() { return false; }
    getLastError() { return this.lastErrorMessage; }
    clearLastError() { this.lastErrorMessage = ''; }
    
    setAuthPersistence(args) { if (!this._isReady('auth')) return; this.persistenceType = (args.PERSISTENCE_TYPE === '–ù–∞–≤—Å–µ–≥–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)') ? 'local' : 'session'; }
    _getPersistence() { return this.persistenceType === 'local' ? firebase.auth.Auth.Persistence.LOCAL : firebase.auth.Auth.Persistence.SESSION; }
    
    signUp(args) { if (!this._isReady('auth')) return; return this.auth.setPersistence(this._getPersistence()).then(() => this.auth.createUserWithEmailAndPassword(args.EMAIL, args.PASSWORD)).catch(error => this._handleError(error, 'auth')); }
    signIn(args) { if (!this._isReady('auth')) return; return this.auth.setPersistence(this._getPersistence()).then(() => this.auth.signInWithEmailAndPassword(args.EMAIL, args.PASSWORD)).catch(error => { if (error.code === 'auth/multi-factor-required') { this.mfaResolver = error.resolver; this.runtime.startHats('ultimateFirebase_whenMfaRequired'); } else { this._handleError(error, 'auth'); } }); }
    signInWithProvider(args) { if (!this._isReady('auth')) return; return this.auth.setPersistence(this._getPersistence()).then(() => { if (args.PROVIDER === 'Anonymous') { return this.auth.signInAnonymously(); } let p; switch (args.PROVIDER) { case 'Google': p = new firebase.auth.GoogleAuthProvider(); break; case 'Microsoft': p = new firebase.auth.OAuthProvider('microsoft.com'); break; case 'GitHub': p = new firebase.auth.GithubAuthProvider(); break; case 'Apple': p = new firebase.auth.OAuthProvider('apple.com'); break; default: return Promise.reject("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"); } return this.auth.signInWithPopup(p); }).catch(error => this._handleError(error, 'auth')); }
    
    signInWithToken(args) { if (!this._isReady('auth')) return; return this.auth.setPersistence(this._getPersistence()).then(() => this.auth.signInWithCustomToken(args.TOKEN)).catch(error => this._handleError(error, 'auth')); }

    signOut() { if (!this._isReady('auth')) return; return this.auth.signOut(); }
    isUserLoggedIn() { return !!this.currentUser; }
    getCurrentUser(args) { if (!this.currentUser) return ''; switch(args.FIELD) { case 'Email': return this.currentUser.email; case 'UID': return this.currentUser.uid; case 'Display Name': return this.currentUser.displayName; case 'Phone Number': return this.currentUser.phoneNumber; case 'Photo URL': return this.currentUser.photoURL; case '–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞?': return this.currentUser.emailVerified; default: return ''; } }

    // [–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø] –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–æ–∫–µ–Ω–∞
    getCurrentUserIDToken() {
        if (!this.currentUser) return Promise.resolve('');
        return this.currentUser.getIdToken(true) // true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            .catch(e => {
                this._handleError(e, 'auth');
                return ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            });
    }

    updateUserProfile(args) { if (!this.currentUser) return this._handleError({message:'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—à–µ–ª'},'auth'); return this.currentUser.updateProfile({ displayName: args.NAME, photoURL: args.PHOTO_URL }).catch(e => this._handleError(e, 'auth')); }
    updateUserPassword(args) { if (!this.currentUser) return this._handleError({message:'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—à–µ–ª'},'auth'); return this.currentUser.updatePassword(args.NEW_PASSWORD).catch(e => this._handleError(e, 'auth')); }
    
    sendVerificationEmail() { if (!this.currentUser) return this._handleError({message:'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—à–µ–ª'},'auth'); return this.currentUser.sendEmailVerification().catch(e => this._handleError(e, 'auth')); }
    sendPasswordReset(args) { if (!this._isReady('auth')) return; return this.auth.sendPasswordResetEmail(args.EMAIL).catch(e => this._handleError(e, 'auth')); }
    updateUserEmail(args) { if (!this.currentUser) return this._handleError({message:'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ—à–µ–ª'},'auth'); return this.currentUser.updateEmail(args.NEW_EMAIL).catch(e => this._handleError(e, 'auth')); }
    
    sendVerificationCode(args) { if (!this._isReady('auth')) return; const appVerifier = window.recaptchaVerifier; return this.auth.signInWithPhoneNumber(args.PHONE_NUMBER, appVerifier).then(confirmationResult => { this.phoneConfirmationResult = confirmationResult; }).catch(error => this._handleError(error, 'auth')); }
    signInWithPhoneCode(args) { if (!this.phoneConfirmationResult) { this._handleError({ message: '–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!' }, 'auth'); return; } return this.phoneConfirmationResult.confirm(args.CODE).catch(error => this._handleError(error, 'auth')); }
    
    enrollMfa(args) { if (!this.currentUser) { this._handleError({ message: '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 2FA –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.' }, 'mfa'); return; } const appVerifier = window.recaptchaVerifier; const phoneInfoOptions = { phoneNumber: args.PHONE_NUMBER, session: this.currentUser.multiFactor.session }; const phoneAuthProvider = new firebase.auth.PhoneAuthProvider(); return phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, appVerifier).then(verificationId => { const code = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –°–ú–° –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 2FA:'); if (!code) return; const assertion = firebase.auth.PhoneMultiFactorGenerator.assertion(verificationId, code); return this.currentUser.multiFactor.enroll(assertion, `My Phone`); }).catch(error => this._handleError(error, 'mfa')); }
    whenMfaRequired() { return false; }
    getMfaHint() { if (!this.mfaResolver) return ''; return this.mfaResolver.hints[0].displayName || this.mfaResolver.hints[0].phoneNumber; }
    completeSignInWithMfaCode(args) { if (!this.mfaResolver) return; const cred = firebase.auth.PhoneMultiFactorGenerator.assertion( this.mfaResolver.hints[0].verificationId, args.CODE ); return this.mfaResolver.resolveSignIn(cred).then(() => { this.mfaResolver = null; }).catch(error => this._handleError(error, 'mfa')); }
    
    firestoreAddDoc(args) { if (!this._isReady('firestore')) return Promise.resolve(''); return this.firestore.collection(args.PATH).add(this._parseValue(args.DATA)).then(docRef => docRef.id).catch(e => { this._handleError(e, 'firestore'); return ''; }); }
    firestoreSetDoc(args) { if (!this._isReady('firestore')) return; const docPath = args.PATH.split('/'); const docId = docPath.pop(); const colPath = docPath.join('/'); return this.firestore.collection(colPath).doc(docId).set(this._parseValue(args.DATA), { merge: true }).catch(e => this._handleError(e, 'firestore')); }
    firestoreGetDoc(args) { if (!this._isReady('firestore')) return Promise.resolve(''); return this.firestore.doc(args.PATH).get().then(doc => doc.exists ? JSON.stringify(doc.data()) : '').catch(e => { this._handleError(e, 'firestore'); return ''; }); }
    firestoreDeleteDoc(args) { if (!this._isReady('firestore')) return; return this.firestore.doc(args.PATH).delete().catch(e => this._handleError(e, 'firestore')); }
    
    storageUploadText(args) { if (!this._isReady('storage')) return; return this.storage.ref(args.PATH).putString(args.TEXT_DATA).catch(e => this._handleError(e, 'storage')); }
    storageGetURL(args) { if (!this._isReady('storage')) return Promise.resolve(''); return this.storage.ref(args.PATH).getDownloadURL().catch(e => { this._handleError(e, 'storage'); return ''; }); }
    storageDeleteFile(args) { if (!this._isReady('storage')) return; return this.storage.ref(args.PATH).delete().catch(e => this._handleError(e, 'storage')); }
    
    functionsCall(args) { if (!this._isReady('functions')) return; const callable = this.functions.httpsCallable(args.NAME); return callable(this._parseValue(args.DATA)).then(result => { this.lastFunctionResult = JSON.stringify(result.data); this.runtime.startHats('ultimateFirebase_onFunctionResult'); }).catch(e => this._handleError(e, 'functions')); }
    onFunctionResult() { return false; }
    getFunctionResult() { return this.lastFunctionResult; }

    _getHttpsFunctionUrl(endpoint) { if (!this.firebase || !this.firebase.options.projectId) { this._handleError({ message: 'Firebase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞.' }, 'functions'); return null; } const projectId = this.firebase.options.projectId; return `https://us-central1-${projectId}.cloudfunctions.net/${endpoint}`; }
    httpsCallGet(args) { if (!this._isReady('functions')) return; const url = this._getHttpsFunctionUrl(args.ENDPOINT); if (!url) return; return fetch(url).then(response => { if (!response.ok) { throw new Error(`HTTP –æ—à–∏–±–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`); } return response.json(); }).then(data => { this.lastFunctionResult = JSON.stringify(data); this.runtime.startHats('ultimateFirebase_onFunctionResult'); }).catch(e => this._handleError(e, 'functions')); }
    httpsCallPost(args) { if (!this._isReady('functions')) return; const url = this._getHttpsFunctionUrl(args.ENDPOINT); if (!url) return; const postData = this._parseValue(args.DATA); return fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(postData), }).then(response => { if (!response.ok) { throw new Error(`HTTP –æ—à–∏–±–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`); } return response.json(); }).then(data => { this.lastFunctionResult = JSON.stringify(data); this.runtime.startHats('ultimateFirebase_onFunctionResult'); }).catch(e => this._handleError(e, 'functions')); }

    writeData(args) { if (!this._isReady('db')) return; return this.db.ref(args.PATH).set(this._parseValue(args.VALUE)).catch(error => this._handleError(error, 'db')); }
    readData(args) { if (!this._isReady('db')) return Promise.resolve(''); return this.db.ref(args.PATH).get().then(snapshot => { if (!snapshot.exists()) { return ''; } const data = snapshot.val(); if (typeof data === 'object' && data !== null) { return JSON.stringify(data); } return data; }).catch(error => { this._handleError(error, 'db'); return '–û–®–ò–ë–ö–ê'; }); }
    listenForData(args) { if (!this._isReady('db')) return false; const path = args.PATH; if (this.dbListeners.has(path)) return; const listener = this.db.ref(path).on('value', snapshot => { const data = snapshot.val(); this.lastReceivedData = (data && typeof data === 'object') ? JSON.stringify(data) : data; this.runtime.startHats('ultimateFirebase_listenForData', { PATH: path }); }, error => this._handleError(error, 'db')); this.dbListeners.set(path, listener); return false; }
    getLastReceivedData() { return this.lastReceivedData; }
}

Scratch.extensions.register(new UltimateFirebaseExtension(Scratch.vm.runtime));
